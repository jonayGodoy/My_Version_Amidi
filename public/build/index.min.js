/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function ManagerDom() {

    var idLoad = "amidi";
    var idApp = "app";

    this.start = function () {
        var divLoad = document.getElementById(idLoad);
        var divApp = document.getElementById(idApp);

        divLoad.classList.add('hidden');
        divApp.classList.remove('hidden');
    };

    this.renderQuestion = function (question) {
        throw "UnSupportedOperationException";
    };

    this.renderQuestionAnswered = function (question) {
        throw "UnSupportedOperationException";
    };

    this.ShowButtonNext = function () {
        throw "UnSupportedOperationException";
    };
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ManagerFile = __webpack_require__(2);
var ManagerGame = __webpack_require__(3);
var ManagerQuiz = __webpack_require__(4);
var ManagerDom = __webpack_require__(0);

/*
window.uclicked = function() {
    carlos.saluda();
};
window.uclicked = uclicked;*/

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function ManagerFile() {
    this.loadJson = function () {
        var httpRequest = new XMLHttpRequest();
        httpRequest.onreadystatechange = function () {
            if (httpRequest.readyState === 4) {
                if (httpRequest.status === 200) {
                    var data = httpRequest.responseText;
                    localStorage.setItem('preguntas', data);
                    return JSON.parse(data);
                }
            }
        };
        httpRequest.open('get', '../public/preguntas.json');
        httpRequest.send();
        return localStorage.getItem("preguntas");
    };
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ManagerDom = __webpack_require__(0);

function ManagerGame(managerQuiz, managerDom, numberForWin) {

    var NUMBER_FOR_WIN = numberForWin;

    var countQuestionsSuccess = 0;

    constructor();
    function constructor() {
        if (NUMBER_FOR_WIN == undefined) throw "You have introduce numberForWin in the constructor";
        if (!Number.isInteger(NUMBER_FOR_WIN)) throw "You numberForWin have type Integer";
    };

    this.startGame = function () {
        managerDom.start();

        var question = managerQuiz.getCurrentQuestion();
        managerDom.renderQuestion(question);
    };

    this.updateAnswer = function (answer) {
        var question = managerQuiz.getCurrentQuestion();

        if (managerQuiz.isCorrectQuestion(answer)) {
            countQuestionsSuccess += 1;
        }

        managerDom.renderQuestionAnswered(question);
        managerDom.ShowButtonNext();
    };

    this.nextQuestion = function () {
        managerQuiz.updateQuestions();
        var question = managerQuiz.getCurrentQuestion();
        managerDom.renderQuestion(question);
    };

    this.isPlayerWin = function () {
        return countQuestionsSuccess == NUMBER_FOR_WIN;
    };
}
module.exports = ManagerGame;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ManagerQuiz(ListQuestion) {

    var listQuestion = ListQuestion;
    var currentQuestion = randomQuestion();

    this.getCurrentQuestion = function () {
        return currentQuestion;
    };

    this.getListQuestion = function () {
        return listQuestion;
    };

    this.isCorrectQuestion = function (question, answer) {
        var result = question.respuesta == answer;
        return result;
    };

    this.updateQuestions = function () {
        deleteCurrentQuestionToList();
        currentQuestion = randomQuestion();
    };

    function randomQuestion() {
        var index = Math.floor(Math.random() * (listQuestion.length - 0) + 0);
        return listQuestion[index];
    }

    function deleteCurrentQuestionToList() {
        var position = listQuestion.indexOf(currentQuestion);
        listQuestion.splice(position, 1);
    }
}
module.exports = ManagerQuiz;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,