/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ManagerFile = __webpack_require__(2);
var ManagerGame = __webpack_require__(3);
var ManagerQuiz = __webpack_require__(4);
var ManagerDom = __webpack_require__(1);

initialise();
function initialise() {
    var managerFile = new ManagerFile();
    var listJson = managerFile.loadJson();
    var managerQuiz = new ManagerQuiz(listJson.preguntas);
    var managerDom = new ManagerDom();
    var managerGame = new ManagerGame(managerQuiz, managerDom);

    window.start = managerGame.startGame;
    window.updateAnswer = managerGame.updateAnswer;
    window.nextQuestion = managerGame.nextQuestion;
}

window.resetGame = function () {
    location.reload(true);
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function ManagerDom() {
    var _this = this;

    var idLoad = "amidi";
    var idApp = "app";

    var idQuestion = "preguntas";
    var idNext = "siguiente";

    var idWin = "ganador";

    this.start = function () {
        var divLoad = document.getElementById(idLoad);
        var divApp = document.getElementById(idApp);

        divLoad.classList.add('hidden');
        divApp.classList.remove('hidden');

        document.body.style.backgroundColor = '#57CCD8';
    };

    this.renderQuestion = function (question) {
        var divQuestion = document.getElementById(idQuestion);

        var answerHtml = "<h1 class='center'>" + question.pregunta + "</h1>";
        for (var nAnswer in question.respuestas) {
            answerHtml = answerHtml + " <div class=\"pregunta\"" + " id=\"" + question.respuestas[nAnswer] + "\"" + " onclick=\"window.updateAnswer('" + question.respuestas[nAnswer] + "')\">" + question.respuestas[nAnswer] + "</div>";
        }
        divQuestion.innerHTML = answerHtml;
    };

    this.renderQuestionAnswered = function (answer, isCorrect) {
        var divAnswer = document.getElementById(answer);
        removeAnswerOnClick();

        isCorrect ? divAnswer.style.color = 'yellowgreen' : divAnswer.style.color = 'red';
    };

    this.toggleButtonNext = function () {
        var classList = document.getElementById(idNext).classList;
        var isHidden = classList.contains('hidden');

        isHidden ? classList.remove('hidden') : classList.add('hidden');
    };

    this.printVictory = function () {
        var divVictory = document.getElementById(idWin);
        var divQuestion = document.getElementById(idQuestion);

        _this.toggleButtonNext();
        divVictory.classList.remove('hidden');

        divQuestion.classList.add('hidden');
    };

    function removeAnswerOnClick() {
        var divQuestion = document.getElementById(idQuestion);

        var childNodes = divQuestion.childNodes;
        for (var i = 0; i < childNodes.length; i++) {
            childNodes[i].onclick = function () {
                return false;
            };
        }
    }
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function ManagerFile() {
    this.loadJson = function () {
        var httpRequest = new XMLHttpRequest();
        httpRequest.onreadystatechange = function () {
            if (httpRequest.readyState === 4) {
                if (httpRequest.status === 200) {
                    var data = httpRequest.responseText;
                    localStorage.setItem('preguntas', data);
                }
            }
        };
        httpRequest.open('get', '../public/preguntas.json');
        httpRequest.send();
        return JSON.parse(localStorage.getItem("preguntas"));
    };
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function ManagerGame(managerQuiz, managerDom) {

    var NUMBER_FOR_WIN = 5;

    var countQuestionsSuccess = 0;

    this.startGame = function () {
        managerDom.start();

        var question = managerQuiz.getCurrentQuestion();
        managerDom.renderQuestion(question);
    };

    this.updateAnswer = function (answer) {
        var isCorrect = managerQuiz.isCorrectQuestion(answer);
        if (isCorrect) {
            countQuestionsSuccess = countQuestionsSuccess + 1;
            managerQuiz.updateQuestions();
        }

        managerDom.renderQuestionAnswered(answer, isCorrect);
        managerDom.toggleButtonNext();
    };

    this.nextQuestion = function () {
        if (isPlayerWin()) {
            managerDom.printVictory();
        } else {
            var question = managerQuiz.getCurrentQuestion();
            managerDom.renderQuestion(question);
            managerDom.toggleButtonNext();
        }
    };

    function isPlayerWin() {
        return countQuestionsSuccess === NUMBER_FOR_WIN;
    };
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function ManagerQuiz(ListQuestion) {

    var listQuestion = ListQuestion;
    var currentQuestion = randomQuestion();

    this.getCurrentQuestion = function () {
        return currentQuestion;
    };

    this.getListQuestion = function () {
        return listQuestion;
    };

    this.isCorrectQuestion = function (answer) {
        var result = currentQuestion.respuesta === answer;
        return result;
    };

    this.updateQuestions = function () {
        deleteCurrentQuestionToList();
        currentQuestion = randomQuestion();
    };

    function randomQuestion() {
        var index = Math.floor(Math.random() * (listQuestion.length - 0) + 0);
        return listQuestion[index];
    }

    function deleteCurrentQuestionToList() {
        var position = listQuestion.indexOf(currentQuestion);
        listQuestion.splice(position, 1);
    }
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(0);


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNTQ0MjQzNDI5YmQxYjAzN2Y1NTYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9NYW5hZ2VyRG9tLmpzIiwid2VicGFjazovLy8uL3NyYy9NYW5hZ2VyRmlsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvTWFuYWdlckdhbWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL01hbmFnZXJRdWl6LmpzIl0sIm5hbWVzIjpbIk1hbmFnZXJGaWxlIiwicmVxdWlyZSIsIk1hbmFnZXJHYW1lIiwiTWFuYWdlclF1aXoiLCJNYW5hZ2VyRG9tIiwiaW5pdGlhbGlzZSIsIm1hbmFnZXJGaWxlIiwibGlzdEpzb24iLCJsb2FkSnNvbiIsIm1hbmFnZXJRdWl6IiwicHJlZ3VudGFzIiwibWFuYWdlckRvbSIsIm1hbmFnZXJHYW1lIiwid2luZG93Iiwic3RhcnQiLCJzdGFydEdhbWUiLCJ1cGRhdGVBbnN3ZXIiLCJuZXh0UXVlc3Rpb24iLCJyZXNldEdhbWUiLCJsb2NhdGlvbiIsInJlbG9hZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJpZExvYWQiLCJpZEFwcCIsImlkUXVlc3Rpb24iLCJpZE5leHQiLCJpZFdpbiIsImRpdkxvYWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZGl2QXBwIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwiYm9keSIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwicmVuZGVyUXVlc3Rpb24iLCJxdWVzdGlvbiIsImRpdlF1ZXN0aW9uIiwiYW5zd2VySHRtbCIsInByZWd1bnRhIiwibkFuc3dlciIsInJlc3B1ZXN0YXMiLCJpbm5lckhUTUwiLCJyZW5kZXJRdWVzdGlvbkFuc3dlcmVkIiwiYW5zd2VyIiwiaXNDb3JyZWN0IiwiZGl2QW5zd2VyIiwicmVtb3ZlQW5zd2VyT25DbGljayIsImNvbG9yIiwidG9nZ2xlQnV0dG9uTmV4dCIsImlzSGlkZGVuIiwiY29udGFpbnMiLCJwcmludFZpY3RvcnkiLCJkaXZWaWN0b3J5IiwiY2hpbGROb2RlcyIsImkiLCJsZW5ndGgiLCJvbmNsaWNrIiwiaHR0cFJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJkYXRhIiwicmVzcG9uc2VUZXh0IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIm9wZW4iLCJzZW5kIiwiSlNPTiIsInBhcnNlIiwiZ2V0SXRlbSIsIk5VTUJFUl9GT1JfV0lOIiwiY291bnRRdWVzdGlvbnNTdWNjZXNzIiwiZ2V0Q3VycmVudFF1ZXN0aW9uIiwiaXNDb3JyZWN0UXVlc3Rpb24iLCJ1cGRhdGVRdWVzdGlvbnMiLCJpc1BsYXllcldpbiIsIkxpc3RRdWVzdGlvbiIsImxpc3RRdWVzdGlvbiIsImN1cnJlbnRRdWVzdGlvbiIsInJhbmRvbVF1ZXN0aW9uIiwiZ2V0TGlzdFF1ZXN0aW9uIiwicmVzdWx0IiwicmVzcHVlc3RhIiwiZGVsZXRlQ3VycmVudFF1ZXN0aW9uVG9MaXN0IiwiaW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJwb3NpdGlvbiIsImluZGV4T2YiLCJzcGxpY2UiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtREFBMkMsY0FBYzs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBMkIsMEJBQTBCLEVBQUU7QUFDdkQseUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQXNELCtEQUErRDs7QUFFckg7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7OztBQ2hF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QUFULENBQXFCOEUsWUFBckIsRUFBbUM7O0FBRWhELFFBQUlDLGVBQWVELFlBQW5CO0FBQ0EsUUFBSUUsa0JBQWtCQyxnQkFBdEI7O0FBR0EsU0FBS1Asa0JBQUwsR0FBMEI7QUFBQSxlQUFPTSxlQUFQO0FBQUEsS0FBMUI7O0FBRUEsU0FBS0UsZUFBTCxHQUF1QjtBQUFBLGVBQU9ILFlBQVA7QUFBQSxLQUF2Qjs7QUFHQyxTQUFLSixpQkFBTCxHQUF5QixVQUFTL0IsTUFBVCxFQUFpQjtBQUN2QyxZQUFJdUMsU0FBU0gsZ0JBQWdCSSxTQUFoQixLQUE4QnhDLE1BQTNDO0FBQ0MsZUFBT3VDLE1BQVA7QUFDSixLQUhBOztBQUtELFNBQUtQLGVBQUwsR0FBd0IsWUFBVztBQUMvQlM7QUFDQUwsMEJBQWtCQyxnQkFBbEI7QUFDSCxLQUhEOztBQUtBLGFBQVNBLGNBQVQsR0FBMEI7QUFDdEIsWUFBSUssUUFBUUMsS0FBS0MsS0FBTCxDQUFXRCxLQUFLRSxNQUFMLE1BQWlCVixhQUFhdkIsTUFBYixHQUFzQixDQUF2QyxJQUE0QyxDQUF2RCxDQUFaO0FBQ0EsZUFBT3VCLGFBQWFPLEtBQWIsQ0FBUDtBQUNIOztBQUVELGFBQVNELDJCQUFULEdBQXNDO0FBQ2xDLFlBQUlLLFdBQVdYLGFBQWFZLE9BQWIsQ0FBcUJYLGVBQXJCLENBQWY7QUFDQUQscUJBQWFhLE1BQWIsQ0FBb0JGLFFBQXBCLEVBQTZCLENBQTdCO0FBQ0g7QUFFSixDQS9CRCxDIiwiZmlsZSI6ImluZGV4Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDUpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDU0NDI0MzQyOWJkMWIwMzdmNTU2IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGV0IE1hbmFnZXJGaWxlID0gcmVxdWlyZSgnLi9NYW5hZ2VyRmlsZScpO1xyXG5sZXQgTWFuYWdlckdhbWUgPSByZXF1aXJlKCcuL01hbmFnZXJHYW1lJyk7XHJcbmxldCBNYW5hZ2VyUXVpeiA9IHJlcXVpcmUoJy4vTWFuYWdlclF1aXonKTtcclxubGV0IE1hbmFnZXJEb20gPSByZXF1aXJlKCcuL01hbmFnZXJEb20nKTtcclxuXHJcbmluaXRpYWxpc2UoKTtcclxuZnVuY3Rpb24gaW5pdGlhbGlzZSgpe1xyXG4gICAgbGV0IG1hbmFnZXJGaWxlID0gbmV3IE1hbmFnZXJGaWxlKCk7XHJcbiAgICBsZXQgbGlzdEpzb24gPSBtYW5hZ2VyRmlsZS5sb2FkSnNvbigpO1xyXG4gICAgbGV0IG1hbmFnZXJRdWl6ID0gbmV3IE1hbmFnZXJRdWl6KGxpc3RKc29uLnByZWd1bnRhcyk7XHJcbiAgICBsZXQgbWFuYWdlckRvbSA9IG5ldyBNYW5hZ2VyRG9tKCk7XHJcbiAgICBsZXQgbWFuYWdlckdhbWUgPSBuZXcgTWFuYWdlckdhbWUobWFuYWdlclF1aXosbWFuYWdlckRvbSk7XHJcblxyXG4gICAgd2luZG93LnN0YXJ0ID0gbWFuYWdlckdhbWUuc3RhcnRHYW1lO1xyXG4gICAgd2luZG93LnVwZGF0ZUFuc3dlciA9IG1hbmFnZXJHYW1lLnVwZGF0ZUFuc3dlcjtcclxuICAgIHdpbmRvdy5uZXh0UXVlc3Rpb24gPSBtYW5hZ2VyR2FtZS5uZXh0UXVlc3Rpb247XHJcbn1cclxuXHJcbndpbmRvdy5yZXNldEdhbWUgPSBmdW5jdGlvbigpe1xyXG4gICAgbG9jYXRpb24ucmVsb2FkKHRydWUpO1xyXG59O1xyXG5cclxuXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gTWFuYWdlckRvbSgpIHtcclxuXHJcbiAgICBjb25zdCBpZExvYWQgPSBcImFtaWRpXCI7XHJcbiAgICBjb25zdCBpZEFwcCA9IFwiYXBwXCI7XHJcblxyXG4gICAgY29uc3QgaWRRdWVzdGlvbiA9IFwicHJlZ3VudGFzXCI7XHJcbiAgICBjb25zdCBpZE5leHQgPSBcInNpZ3VpZW50ZVwiO1xyXG5cclxuICAgIGNvbnN0IGlkV2luID0gXCJnYW5hZG9yXCI7XHJcblxyXG4gICAgdGhpcy5zdGFydCA9ICgpID0+IHtcclxuICAgICAgICBsZXQgZGl2TG9hZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkTG9hZCk7XHJcbiAgICAgICAgbGV0IGRpdkFwcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkQXBwKTtcclxuXHJcblxyXG4gICAgICAgIGRpdkxvYWQuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcbiAgICAgICAgZGl2QXBwLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG5cclxuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjNTdDQ0Q4JztcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5yZW5kZXJRdWVzdGlvbiA9IChxdWVzdGlvbikgPT4ge1xyXG4gICAgICAgIGxldCBkaXZRdWVzdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkUXVlc3Rpb24pO1xyXG5cclxuICAgICAgICBsZXQgYW5zd2VySHRtbCA9IFwiPGgxIGNsYXNzPSdjZW50ZXInPlwiK3F1ZXN0aW9uLnByZWd1bnRhK1wiPC9oMT5cIjtcclxuICAgICAgICBmb3IobGV0IG5BbnN3ZXIgaW4gcXVlc3Rpb24ucmVzcHVlc3Rhcyl7XHJcbiAgICAgICAgICAgIGFuc3dlckh0bWwgPSBhbnN3ZXJIdG1sICtcclxuICAgICAgICAgICAgICAgIGAgPGRpdiBjbGFzcz1cInByZWd1bnRhXCJgXHJcbiAgICAgICAgICAgICAgICArYCBpZD1cImArcXVlc3Rpb24ucmVzcHVlc3Rhc1tuQW5zd2VyXStgXCJgXHJcbiAgICAgICAgICAgICAgICArYCBvbmNsaWNrPVwid2luZG93LnVwZGF0ZUFuc3dlcignYCtxdWVzdGlvbi5yZXNwdWVzdGFzW25BbnN3ZXJdK2AnKVwiPmBcclxuICAgICAgICAgICAgICAgICsgcXVlc3Rpb24ucmVzcHVlc3Rhc1tuQW5zd2VyXVxyXG4gICAgICAgICAgICAgICAgKyBgPC9kaXY+YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGl2UXVlc3Rpb24uaW5uZXJIVE1MID0gYW5zd2VySHRtbDtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5yZW5kZXJRdWVzdGlvbkFuc3dlcmVkID0gKGFuc3dlciwgaXNDb3JyZWN0KSA9PiB7XHJcbiAgICAgICAgbGV0IGRpdkFuc3dlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGFuc3dlcik7XHJcbiAgICAgICAgcmVtb3ZlQW5zd2VyT25DbGljaygpO1xyXG5cclxuICAgICAgICBpc0NvcnJlY3QgP1xyXG4gICAgICAgICAgICBkaXZBbnN3ZXIuc3R5bGUuY29sb3IgPSAneWVsbG93Z3JlZW4nXHJcbiAgICAgICAgICAgIDogZGl2QW5zd2VyLnN0eWxlLmNvbG9yID0gJ3JlZCc7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMudG9nZ2xlQnV0dG9uTmV4dCA9ICgpID0+IHtcclxuICAgICAgICBsZXQgY2xhc3NMaXN0ID0gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkTmV4dCkuY2xhc3NMaXN0O1xyXG4gICAgICAgIGxldCBpc0hpZGRlbiA9ICBjbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbicpO1xyXG5cclxuICAgICAgICBpc0hpZGRlbiA/XHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpXHJcbiAgICAgICAgICAgIDogY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5wcmludFZpY3RvcnkgPSAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGRpdlZpY3RvcnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZFdpbik7XHJcbiAgICAgICAgbGV0IGRpdlF1ZXN0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRRdWVzdGlvbik7XHJcblxyXG5cclxuICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbk5leHQoKTtcclxuICAgICAgICBkaXZWaWN0b3J5LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG5cclxuICAgICAgICBkaXZRdWVzdGlvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlQW5zd2VyT25DbGljaygpe1xyXG4gICAgICAgIGxldCBkaXZRdWVzdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkUXVlc3Rpb24pO1xyXG5cclxuICAgICAgICBsZXQgY2hpbGROb2RlcyA9IGRpdlF1ZXN0aW9uLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgZm9yKCBsZXQgaSA9MDtpIDwgY2hpbGROb2Rlcy5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgY2hpbGROb2Rlc1tpXS5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG59O1xyXG5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL01hbmFnZXJEb20uanMiLCIndXNlIHN0cmljdCc7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gTWFuYWdlckZpbGUoKSB7XHJcbiAgICAgdGhpcy5sb2FkSnNvbiA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgbGV0IGh0dHBSZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgaHR0cFJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChodHRwUmVxdWVzdC5yZWFkeVN0YXRlID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaHR0cFJlcXVlc3Quc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IGh0dHBSZXF1ZXN0LnJlc3BvbnNlVGV4dDtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJlZ3VudGFzJyxkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaHR0cFJlcXVlc3Qub3BlbignZ2V0JywgJy4uL3B1YmxpYy9wcmVndW50YXMuanNvbicpO1xyXG4gICAgICAgIGh0dHBSZXF1ZXN0LnNlbmQoKTtcclxuICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJwcmVndW50YXNcIikpO1xyXG4gICAgfVxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvTWFuYWdlckZpbGUuanMiLCIndXNlIHN0cmljdCc7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIE1hbmFnZXJHYW1lKG1hbmFnZXJRdWl6LCBtYW5hZ2VyRG9tKSB7XHJcblxyXG4gICAgY29uc3QgTlVNQkVSX0ZPUl9XSU4gPSA1O1xyXG5cclxuICAgIGxldCBjb3VudFF1ZXN0aW9uc1N1Y2Nlc3MgPSAwO1xyXG5cclxuICAgIHRoaXMuc3RhcnRHYW1lID0gKCkgPT4ge1xyXG4gICAgICAgIG1hbmFnZXJEb20uc3RhcnQoKTtcclxuXHJcbiAgICAgICAgbGV0IHF1ZXN0aW9uID0gbWFuYWdlclF1aXouZ2V0Q3VycmVudFF1ZXN0aW9uKCk7XHJcbiAgICAgICAgbWFuYWdlckRvbS5yZW5kZXJRdWVzdGlvbihxdWVzdGlvbik7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMudXBkYXRlQW5zd2VyID0gKGFuc3dlcikgPT4ge1xyXG4gICAgICAgIGxldCBpc0NvcnJlY3QgPSBtYW5hZ2VyUXVpei5pc0NvcnJlY3RRdWVzdGlvbihhbnN3ZXIpXHJcbiAgICAgICAgaWYoaXNDb3JyZWN0KXtcclxuICAgICAgICAgICAgY291bnRRdWVzdGlvbnNTdWNjZXNzID0gY291bnRRdWVzdGlvbnNTdWNjZXNzICsxO1xyXG4gICAgICAgICAgICBtYW5hZ2VyUXVpei51cGRhdGVRdWVzdGlvbnMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG1hbmFnZXJEb20ucmVuZGVyUXVlc3Rpb25BbnN3ZXJlZChhbnN3ZXIsaXNDb3JyZWN0KTtcclxuICAgICAgICBtYW5hZ2VyRG9tLnRvZ2dsZUJ1dHRvbk5leHQoKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5uZXh0UXVlc3Rpb24gPSBmdW5jdGlvbigpe1xyXG4gICAgICAgIGlmKGlzUGxheWVyV2luKCkpe1xyXG4gICAgICAgICAgICBtYW5hZ2VyRG9tLnByaW50VmljdG9yeSgpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBsZXQgcXVlc3Rpb24gPSBtYW5hZ2VyUXVpei5nZXRDdXJyZW50UXVlc3Rpb24oKTtcclxuICAgICAgICAgICAgbWFuYWdlckRvbS5yZW5kZXJRdWVzdGlvbihxdWVzdGlvbik7XHJcbiAgICAgICAgICAgIG1hbmFnZXJEb20udG9nZ2xlQnV0dG9uTmV4dCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGlzUGxheWVyV2luKCl7XHJcbiAgICAgICAgcmV0dXJuIChjb3VudFF1ZXN0aW9uc1N1Y2Nlc3MgPT09IE5VTUJFUl9GT1JfV0lOKTtcclxuICAgIH07XHJcblxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvTWFuYWdlckdhbWUuanMiLCIndXNlIHN0cmljdCc7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIE1hbmFnZXJRdWl6KExpc3RRdWVzdGlvbikge1xyXG5cclxuICAgIGxldCBsaXN0UXVlc3Rpb24gPSBMaXN0UXVlc3Rpb247XHJcbiAgICBsZXQgY3VycmVudFF1ZXN0aW9uID0gcmFuZG9tUXVlc3Rpb24oKTtcclxuXHJcblxyXG4gICAgdGhpcy5nZXRDdXJyZW50UXVlc3Rpb24gPSAoKSA9PiAoY3VycmVudFF1ZXN0aW9uKTtcclxuXHJcbiAgICB0aGlzLmdldExpc3RRdWVzdGlvbiA9ICgpID0+IChsaXN0UXVlc3Rpb24pO1xyXG5cclxuXHJcbiAgICAgdGhpcy5pc0NvcnJlY3RRdWVzdGlvbiA9IGZ1bmN0aW9uKGFuc3dlcikge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBjdXJyZW50UXVlc3Rpb24ucmVzcHVlc3RhID09PSBhbnN3ZXI7XHJcbiAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMudXBkYXRlUXVlc3Rpb25zID0gIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGRlbGV0ZUN1cnJlbnRRdWVzdGlvblRvTGlzdCgpO1xyXG4gICAgICAgIGN1cnJlbnRRdWVzdGlvbiA9IHJhbmRvbVF1ZXN0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmFuZG9tUXVlc3Rpb24oKSB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGxpc3RRdWVzdGlvbi5sZW5ndGggLSAwKSArIDApO1xyXG4gICAgICAgIHJldHVybiBsaXN0UXVlc3Rpb25baW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlbGV0ZUN1cnJlbnRRdWVzdGlvblRvTGlzdCgpe1xyXG4gICAgICAgIGxldCBwb3NpdGlvbiA9IGxpc3RRdWVzdGlvbi5pbmRleE9mKGN1cnJlbnRRdWVzdGlvbik7XHJcbiAgICAgICAgbGlzdFF1ZXN0aW9uLnNwbGljZShwb3NpdGlvbiwxKTtcclxuICAgIH1cclxuXHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9NYW5hZ2VyUXVpei5qcyJdLCJzb3VyY2VSb290IjoiIn0=