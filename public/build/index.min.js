/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ManagerFile = __webpack_require__(3);
var Game = __webpack_require__(1);
var ManagerQuiz = __webpack_require__(4);
var ManagerDom = __webpack_require__(2);

initialise();
function initialise() {
    var managerFile = new ManagerFile();
    managerFile.loadJson().then(function (v) {
        var managerQuiz = new ManagerQuiz(v.preguntas);
        var managerDom = new ManagerDom();
        var game = new Game(managerQuiz, managerDom);

        window.start = game.startGame;
        window.updateAnswer = game.updateAnswer;
        window.nextQuestion = game.nextQuestion;
    });
}

window.resetGame = function () {
    location.reload(true);
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function Game(managerQuiz, managerDom) {

    var NUMBER_FOR_WIN = 5;

    var countQuestionsSuccess = 0;

    this.startGame = function () {
        managerDom.start();

        var question = managerQuiz.getCurrentQuestion();
        managerDom.renderQuestion(question);
    };

    this.updateAnswer = function (answer) {
        var isCorrect = managerQuiz.isCorrectQuestion(answer);
        if (isCorrect) {
            countQuestionsSuccess = countQuestionsSuccess + 1;
            managerQuiz.updateQuestions();
        }

        managerDom.renderQuestionAnswered(answer, isCorrect);
        managerDom.toggleButtonNext();
    };

    this.nextQuestion = function () {
        if (isPlayerWin()) {
            managerDom.printVictory();
        } else {
            var question = managerQuiz.getCurrentQuestion();
            managerDom.renderQuestion(question);
            managerDom.toggleButtonNext();
        }
    };

    function isPlayerWin() {
        return countQuestionsSuccess === NUMBER_FOR_WIN;
    };
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function ManagerDom() {
    var _this = this;

    var idLoad = "amidi";
    var idApp = "app";

    var idQuestion = "preguntas";
    var idNext = "siguiente";

    var idWin = "ganador";

    this.start = function () {
        var divLoad = document.getElementById(idLoad);
        var divApp = document.getElementById(idApp);

        divLoad.classList.add('hidden');
        divApp.classList.remove('hidden');

        document.body.style.backgroundColor = '#57CCD8';
    };

    this.renderQuestion = function (question) {
        var divQuestion = document.getElementById(idQuestion);

        var answerHtml = "<h1 class='center'>" + question.pregunta + "</h1>";
        for (var nAnswer in question.respuestas) {
            answerHtml = answerHtml + " <div class=\"pregunta\"" + " id=\"" + question.respuestas[nAnswer] + "\"" + " onclick=\"window.updateAnswer('" + question.respuestas[nAnswer] + "')\">" + question.respuestas[nAnswer] + "</div>";
        }
        divQuestion.innerHTML = answerHtml;
    };

    this.renderQuestionAnswered = function (answer, isCorrect) {
        var divAnswer = document.getElementById(answer);
        removeAnswerOnClick();

        isCorrect ? divAnswer.style.color = 'yellowgreen' : divAnswer.style.color = 'red';
    };

    this.toggleButtonNext = function () {
        var classList = document.getElementById(idNext).classList;
        var isHidden = classList.contains('hidden');

        isHidden ? classList.remove('hidden') : classList.add('hidden');
    };

    this.printVictory = function () {
        var divVictory = document.getElementById(idWin);
        var divQuestion = document.getElementById(idQuestion);

        _this.toggleButtonNext();
        divVictory.classList.remove('hidden');

        divQuestion.classList.add('hidden');
    };

    function removeAnswerOnClick() {
        var divQuestion = document.getElementById(idQuestion);

        var childNodes = divQuestion.childNodes;
        for (var i = 0; i < childNodes.length; i++) {
            childNodes[i].onclick = function () {
                return false;
            };
        }
    }
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function ManagerFile() {

    this.loadJson = function () {
        return new Promise(function (resolve, reject) {

            var data = "";
            var httpRequest = new XMLHttpRequest();
            httpRequest.onreadystatechange = function () {
                if (httpRequest.readyState === 4) {
                    if (httpRequest.status === 200) {
                        data = httpRequest.responseText;
                        resolve(JSON.parse(data));
                    }
                }
            };
            httpRequest.open('get', '../public/preguntas.json');
            httpRequest.send();
        });
    };
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function ManagerQuiz(ListQuestion) {

    var listQuestion = ListQuestion;
    var currentQuestion = randomQuestion();

    this.getCurrentQuestion = function () {
        return currentQuestion;
    };

    this.getListQuestion = function () {
        return listQuestion;
    };

    this.isCorrectQuestion = function (answer) {
        var result = currentQuestion.respuesta === answer;
        return result;
    };

    this.updateQuestions = function () {
        deleteCurrentQuestionToList();
        currentQuestion = randomQuestion();
    };

    function randomQuestion() {
        var index = Math.floor(Math.random() * (listQuestion.length - 0) + 0);
        return listQuestion[index];
    }

    function deleteCurrentQuestionToList() {
        var position = listQuestion.indexOf(currentQuestion);
        listQuestion.splice(position, 1);
    }
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(0);


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYWYyZTc0OTVhZDNlYzAzZDE0YWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9HYW1lLmpzIiwid2VicGFjazovLy8uL3NyYy9NYW5hZ2VyRG9tLmpzIiwid2VicGFjazovLy8uL3NyYy9NYW5hZ2VyRmlsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvTWFuYWdlclF1aXouanMiXSwibmFtZXMiOlsiTWFuYWdlckZpbGUiLCJyZXF1aXJlIiwiR2FtZSIsIk1hbmFnZXJRdWl6IiwiTWFuYWdlckRvbSIsImluaXRpYWxpc2UiLCJtYW5hZ2VyRmlsZSIsImxvYWRKc29uIiwidGhlbiIsIm1hbmFnZXJRdWl6IiwidiIsInByZWd1bnRhcyIsIm1hbmFnZXJEb20iLCJnYW1lIiwid2luZG93Iiwic3RhcnQiLCJzdGFydEdhbWUiLCJ1cGRhdGVBbnN3ZXIiLCJuZXh0UXVlc3Rpb24iLCJyZXNldEdhbWUiLCJsb2NhdGlvbiIsInJlbG9hZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJOVU1CRVJfRk9SX1dJTiIsImNvdW50UXVlc3Rpb25zU3VjY2VzcyIsInF1ZXN0aW9uIiwiZ2V0Q3VycmVudFF1ZXN0aW9uIiwicmVuZGVyUXVlc3Rpb24iLCJhbnN3ZXIiLCJpc0NvcnJlY3QiLCJpc0NvcnJlY3RRdWVzdGlvbiIsInVwZGF0ZVF1ZXN0aW9ucyIsInJlbmRlclF1ZXN0aW9uQW5zd2VyZWQiLCJ0b2dnbGVCdXR0b25OZXh0IiwiaXNQbGF5ZXJXaW4iLCJwcmludFZpY3RvcnkiLCJpZExvYWQiLCJpZEFwcCIsImlkUXVlc3Rpb24iLCJpZE5leHQiLCJpZFdpbiIsImRpdkxvYWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZGl2QXBwIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwiYm9keSIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwiZGl2UXVlc3Rpb24iLCJhbnN3ZXJIdG1sIiwicHJlZ3VudGEiLCJuQW5zd2VyIiwicmVzcHVlc3RhcyIsImlubmVySFRNTCIsImRpdkFuc3dlciIsInJlbW92ZUFuc3dlck9uQ2xpY2siLCJjb2xvciIsImlzSGlkZGVuIiwiY29udGFpbnMiLCJkaXZWaWN0b3J5IiwiY2hpbGROb2RlcyIsImkiLCJsZW5ndGgiLCJvbmNsaWNrIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJkYXRhIiwiaHR0cFJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJyZXNwb25zZVRleHQiLCJKU09OIiwicGFyc2UiLCJvcGVuIiwic2VuZCIsIkxpc3RRdWVzdGlvbiIsImxpc3RRdWVzdGlvbiIsImN1cnJlbnRRdWVzdGlvbiIsInJhbmRvbVF1ZXN0aW9uIiwiZ2V0TGlzdFF1ZXN0aW9uIiwicmVzdWx0IiwicmVzcHVlc3RhIiwiZGVsZXRlQ3VycmVudFF1ZXN0aW9uVG9MaXN0IiwiaW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJwb3NpdGlvbiIsImluZGV4T2YiLCJzcGxpY2UiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtREFBMkMsY0FBYzs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBMkIsMEJBQTBCLEVBQUU7QUFDdkQseUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQXNELCtEQUErRDs7QUFFckg7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7OztBQ2hFQTs7QUFFQSxJQUFJQSxjQUFjLG1CQUFBQyxD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R0FBaUIsU0FBU3BCLFdBQVQsQ0FBcUIrRSxZQUFyQixFQUFtQzs7QUFFaEQsUUFBSUMsZUFBZUQsWUFBbkI7QUFDQSxRQUFJRSxrQkFBa0JDLGdCQUF0Qjs7QUFHQSxTQUFLMUQsa0JBQUwsR0FBMEI7QUFBQSxlQUFPeUQsZUFBUDtBQUFBLEtBQTFCOztBQUVBLFNBQUtFLGVBQUwsR0FBdUI7QUFBQSxlQUFPSCxZQUFQO0FBQUEsS0FBdkI7O0FBR0MsU0FBS3BELGlCQUFMLEdBQXlCLFVBQVNGLE1BQVQsRUFBaUI7QUFDdkMsWUFBSTBELFNBQVNILGdCQUFnQkksU0FBaEIsS0FBOEIzRCxNQUEzQztBQUNDLGVBQU8wRCxNQUFQO0FBQ0osS0FIQTs7QUFLRCxTQUFLdkQsZUFBTCxHQUF3QixZQUFXO0FBQy9CeUQ7QUFDQUwsMEJBQWtCQyxnQkFBbEI7QUFDSCxLQUhEOztBQUtBLGFBQVNBLGNBQVQsR0FBMEI7QUFDdEIsWUFBSUssUUFBUUMsS0FBS0MsS0FBTCxDQUFXRCxLQUFLRSxNQUFMLE1BQWlCVixhQUFhakIsTUFBYixHQUFzQixDQUF2QyxJQUE0QyxDQUF2RCxDQUFaO0FBQ0EsZUFBT2lCLGFBQWFPLEtBQWIsQ0FBUDtBQUNIOztBQUVELGFBQVNELDJCQUFULEdBQXNDO0FBQ2xDLFlBQUlLLFdBQVdYLGFBQWFZLE9BQWIsQ0FBcUJYLGVBQXJCLENBQWY7QUFDQUQscUJBQWFhLE1BQWIsQ0FBb0JGLFFBQXBCLEVBQTZCLENBQTdCO0FBQ0g7QUFFSixDQS9CRCxDIiwiZmlsZSI6ImluZGV4Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDUpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGFmMmU3NDk1YWQzZWMwM2QxNGFlIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGV0IE1hbmFnZXJGaWxlID0gcmVxdWlyZSgnLi9NYW5hZ2VyRmlsZScpO1xyXG5sZXQgR2FtZSA9IHJlcXVpcmUoJy4vR2FtZScpO1xyXG5sZXQgTWFuYWdlclF1aXogPSByZXF1aXJlKCcuL01hbmFnZXJRdWl6Jyk7XHJcbmxldCBNYW5hZ2VyRG9tID0gcmVxdWlyZSgnLi9NYW5hZ2VyRG9tJyk7XHJcblxyXG5pbml0aWFsaXNlKCk7XHJcbmZ1bmN0aW9uIGluaXRpYWxpc2UoKXtcclxuICAgIGxldCBtYW5hZ2VyRmlsZSA9IG5ldyBNYW5hZ2VyRmlsZSgpO1xyXG4gICAgIG1hbmFnZXJGaWxlLmxvYWRKc29uKCkudGhlbih2ID0+IHtcclxuICAgICAgICBsZXQgbWFuYWdlclF1aXogPSBuZXcgTWFuYWdlclF1aXoodi5wcmVndW50YXMpO1xyXG4gICAgICAgIGxldCBtYW5hZ2VyRG9tID0gbmV3IE1hbmFnZXJEb20oKTtcclxuICAgICAgICBsZXQgZ2FtZSA9IG5ldyBHYW1lKG1hbmFnZXJRdWl6LG1hbmFnZXJEb20pO1xyXG5cclxuICAgICAgICB3aW5kb3cuc3RhcnQgPSBnYW1lLnN0YXJ0R2FtZTtcclxuICAgICAgICB3aW5kb3cudXBkYXRlQW5zd2VyID0gZ2FtZS51cGRhdGVBbnN3ZXI7XHJcbiAgICAgICAgd2luZG93Lm5leHRRdWVzdGlvbiA9IGdhbWUubmV4dFF1ZXN0aW9uO1xyXG4gICAgfSk7XHJcblxyXG5cclxufVxyXG5cclxud2luZG93LnJlc2V0R2FtZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICBsb2NhdGlvbi5yZWxvYWQodHJ1ZSk7XHJcbn07XHJcblxyXG5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2luZGV4LmpzIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHYW1lKG1hbmFnZXJRdWl6LCBtYW5hZ2VyRG9tKSB7XHJcblxyXG4gICAgY29uc3QgTlVNQkVSX0ZPUl9XSU4gPSA1O1xyXG5cclxuICAgIGxldCBjb3VudFF1ZXN0aW9uc1N1Y2Nlc3MgPSAwO1xyXG5cclxuICAgIHRoaXMuc3RhcnRHYW1lID0gKCkgPT4ge1xyXG4gICAgICAgIG1hbmFnZXJEb20uc3RhcnQoKTtcclxuXHJcbiAgICAgICAgbGV0IHF1ZXN0aW9uID0gbWFuYWdlclF1aXouZ2V0Q3VycmVudFF1ZXN0aW9uKCk7XHJcbiAgICAgICAgbWFuYWdlckRvbS5yZW5kZXJRdWVzdGlvbihxdWVzdGlvbik7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMudXBkYXRlQW5zd2VyID0gKGFuc3dlcikgPT4ge1xyXG4gICAgICAgIGxldCBpc0NvcnJlY3QgPSBtYW5hZ2VyUXVpei5pc0NvcnJlY3RRdWVzdGlvbihhbnN3ZXIpXHJcbiAgICAgICAgaWYoaXNDb3JyZWN0KXtcclxuICAgICAgICAgICAgY291bnRRdWVzdGlvbnNTdWNjZXNzID0gY291bnRRdWVzdGlvbnNTdWNjZXNzICsxO1xyXG4gICAgICAgICAgICBtYW5hZ2VyUXVpei51cGRhdGVRdWVzdGlvbnMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG1hbmFnZXJEb20ucmVuZGVyUXVlc3Rpb25BbnN3ZXJlZChhbnN3ZXIsaXNDb3JyZWN0KTtcclxuICAgICAgICBtYW5hZ2VyRG9tLnRvZ2dsZUJ1dHRvbk5leHQoKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5uZXh0UXVlc3Rpb24gPSBmdW5jdGlvbigpe1xyXG4gICAgICAgIGlmKGlzUGxheWVyV2luKCkpe1xyXG4gICAgICAgICAgICBtYW5hZ2VyRG9tLnByaW50VmljdG9yeSgpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBsZXQgcXVlc3Rpb24gPSBtYW5hZ2VyUXVpei5nZXRDdXJyZW50UXVlc3Rpb24oKTtcclxuICAgICAgICAgICAgbWFuYWdlckRvbS5yZW5kZXJRdWVzdGlvbihxdWVzdGlvbik7XHJcbiAgICAgICAgICAgIG1hbmFnZXJEb20udG9nZ2xlQnV0dG9uTmV4dCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGlzUGxheWVyV2luKCl7XHJcbiAgICAgICAgcmV0dXJuIChjb3VudFF1ZXN0aW9uc1N1Y2Nlc3MgPT09IE5VTUJFUl9GT1JfV0lOKTtcclxuICAgIH07XHJcblxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvR2FtZS5qcyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gTWFuYWdlckRvbSgpIHtcclxuXHJcbiAgICBjb25zdCBpZExvYWQgPSBcImFtaWRpXCI7XHJcbiAgICBjb25zdCBpZEFwcCA9IFwiYXBwXCI7XHJcblxyXG4gICAgY29uc3QgaWRRdWVzdGlvbiA9IFwicHJlZ3VudGFzXCI7XHJcbiAgICBjb25zdCBpZE5leHQgPSBcInNpZ3VpZW50ZVwiO1xyXG5cclxuICAgIGNvbnN0IGlkV2luID0gXCJnYW5hZG9yXCI7XHJcblxyXG4gICAgdGhpcy5zdGFydCA9ICgpID0+IHtcclxuICAgICAgICBsZXQgZGl2TG9hZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkTG9hZCk7XHJcbiAgICAgICAgbGV0IGRpdkFwcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkQXBwKTtcclxuXHJcblxyXG4gICAgICAgIGRpdkxvYWQuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcbiAgICAgICAgZGl2QXBwLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG5cclxuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjNTdDQ0Q4JztcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5yZW5kZXJRdWVzdGlvbiA9IChxdWVzdGlvbikgPT4ge1xyXG4gICAgICAgIGxldCBkaXZRdWVzdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkUXVlc3Rpb24pO1xyXG5cclxuICAgICAgICBsZXQgYW5zd2VySHRtbCA9IFwiPGgxIGNsYXNzPSdjZW50ZXInPlwiK3F1ZXN0aW9uLnByZWd1bnRhK1wiPC9oMT5cIjtcclxuICAgICAgICBmb3IobGV0IG5BbnN3ZXIgaW4gcXVlc3Rpb24ucmVzcHVlc3Rhcyl7XHJcbiAgICAgICAgICAgIGFuc3dlckh0bWwgPSBhbnN3ZXJIdG1sICtcclxuICAgICAgICAgICAgICAgIGAgPGRpdiBjbGFzcz1cInByZWd1bnRhXCJgXHJcbiAgICAgICAgICAgICAgICArYCBpZD1cImArcXVlc3Rpb24ucmVzcHVlc3Rhc1tuQW5zd2VyXStgXCJgXHJcbiAgICAgICAgICAgICAgICArYCBvbmNsaWNrPVwid2luZG93LnVwZGF0ZUFuc3dlcignYCtxdWVzdGlvbi5yZXNwdWVzdGFzW25BbnN3ZXJdK2AnKVwiPmBcclxuICAgICAgICAgICAgICAgICsgcXVlc3Rpb24ucmVzcHVlc3Rhc1tuQW5zd2VyXVxyXG4gICAgICAgICAgICAgICAgKyBgPC9kaXY+YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGl2UXVlc3Rpb24uaW5uZXJIVE1MID0gYW5zd2VySHRtbDtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5yZW5kZXJRdWVzdGlvbkFuc3dlcmVkID0gKGFuc3dlciwgaXNDb3JyZWN0KSA9PiB7XHJcbiAgICAgICAgbGV0IGRpdkFuc3dlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGFuc3dlcik7XHJcbiAgICAgICAgcmVtb3ZlQW5zd2VyT25DbGljaygpO1xyXG5cclxuICAgICAgICBpc0NvcnJlY3QgP1xyXG4gICAgICAgICAgICBkaXZBbnN3ZXIuc3R5bGUuY29sb3IgPSAneWVsbG93Z3JlZW4nXHJcbiAgICAgICAgICAgIDogZGl2QW5zd2VyLnN0eWxlLmNvbG9yID0gJ3JlZCc7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMudG9nZ2xlQnV0dG9uTmV4dCA9ICgpID0+IHtcclxuICAgICAgICBsZXQgY2xhc3NMaXN0ID0gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkTmV4dCkuY2xhc3NMaXN0O1xyXG4gICAgICAgIGxldCBpc0hpZGRlbiA9ICBjbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbicpO1xyXG5cclxuICAgICAgICBpc0hpZGRlbiA/XHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpXHJcbiAgICAgICAgICAgIDogY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5wcmludFZpY3RvcnkgPSAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGRpdlZpY3RvcnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZFdpbik7XHJcbiAgICAgICAgbGV0IGRpdlF1ZXN0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRRdWVzdGlvbik7XHJcblxyXG5cclxuICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbk5leHQoKTtcclxuICAgICAgICBkaXZWaWN0b3J5LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG5cclxuICAgICAgICBkaXZRdWVzdGlvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlQW5zd2VyT25DbGljaygpe1xyXG4gICAgICAgIGxldCBkaXZRdWVzdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkUXVlc3Rpb24pO1xyXG5cclxuICAgICAgICBsZXQgY2hpbGROb2RlcyA9IGRpdlF1ZXN0aW9uLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgZm9yKCBsZXQgaSA9MDtpIDwgY2hpbGROb2Rlcy5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgY2hpbGROb2Rlc1tpXS5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG59O1xyXG5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL01hbmFnZXJEb20uanMiLCIndXNlIHN0cmljdCc7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gTWFuYWdlckZpbGUoKSB7XHJcblxyXG5cclxuICAgICB0aGlzLmxvYWRKc29uID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgICAgIHZhciBkYXRhID0gXCJcIjtcclxuICAgICAgICBsZXQgaHR0cFJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICBodHRwUmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGh0dHBSZXF1ZXN0LnJlYWR5U3RhdGUgPT09IDQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChodHRwUmVxdWVzdC5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICBkYXRhID0gaHR0cFJlcXVlc3QucmVzcG9uc2VUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShkYXRhKSk7XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGh0dHBSZXF1ZXN0Lm9wZW4oJ2dldCcsICcuLi9wdWJsaWMvcHJlZ3VudGFzLmpzb24nKTtcclxuICAgICAgICBodHRwUmVxdWVzdC5zZW5kKCk7XHJcblxyXG4gICAgICAgICB9KTtcclxuICAgIH1cclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL01hbmFnZXJGaWxlLmpzIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBNYW5hZ2VyUXVpeihMaXN0UXVlc3Rpb24pIHtcclxuXHJcbiAgICBsZXQgbGlzdFF1ZXN0aW9uID0gTGlzdFF1ZXN0aW9uO1xyXG4gICAgbGV0IGN1cnJlbnRRdWVzdGlvbiA9IHJhbmRvbVF1ZXN0aW9uKCk7XHJcblxyXG5cclxuICAgIHRoaXMuZ2V0Q3VycmVudFF1ZXN0aW9uID0gKCkgPT4gKGN1cnJlbnRRdWVzdGlvbik7XHJcblxyXG4gICAgdGhpcy5nZXRMaXN0UXVlc3Rpb24gPSAoKSA9PiAobGlzdFF1ZXN0aW9uKTtcclxuXHJcblxyXG4gICAgIHRoaXMuaXNDb3JyZWN0UXVlc3Rpb24gPSBmdW5jdGlvbihhbnN3ZXIpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gY3VycmVudFF1ZXN0aW9uLnJlc3B1ZXN0YSA9PT0gYW5zd2VyO1xyXG4gICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZVF1ZXN0aW9ucyA9ICBmdW5jdGlvbigpIHtcclxuICAgICAgICBkZWxldGVDdXJyZW50UXVlc3Rpb25Ub0xpc3QoKTtcclxuICAgICAgICBjdXJyZW50UXVlc3Rpb24gPSByYW5kb21RdWVzdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJhbmRvbVF1ZXN0aW9uKCkge1xyXG4gICAgICAgIGxldCBpbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChsaXN0UXVlc3Rpb24ubGVuZ3RoIC0gMCkgKyAwKTtcclxuICAgICAgICByZXR1cm4gbGlzdFF1ZXN0aW9uW2luZGV4XTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkZWxldGVDdXJyZW50UXVlc3Rpb25Ub0xpc3QoKXtcclxuICAgICAgICBsZXQgcG9zaXRpb24gPSBsaXN0UXVlc3Rpb24uaW5kZXhPZihjdXJyZW50UXVlc3Rpb24pO1xyXG4gICAgICAgIGxpc3RRdWVzdGlvbi5zcGxpY2UocG9zaXRpb24sMSk7XHJcbiAgICB9XHJcblxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvTWFuYWdlclF1aXouanMiXSwic291cmNlUm9vdCI6IiJ9