/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ManagerFile = __webpack_require__(3);
var Game = __webpack_require__(1);
var ManagerQuiz = __webpack_require__(4);
var ManagerDom = __webpack_require__(2);

initialise();
function initialise() {
    var managerFile = new ManagerFile();
    managerFile.loadJson().then(function (listQuestionJson) {
        var managerQuiz = new ManagerQuiz(listQuestionJson.preguntas);
        var managerDom = new ManagerDom();
        var game = new Game(managerQuiz, managerDom);

        window.start = game.startGame;
        window.updateAnswer = game.updateAnswer;
        window.nextQuestion = game.nextQuestion;
    });
}

window.resetGame = function () {
    location.reload(true);
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function Game(managerQuiz, managerDom) {

    var NUMBER_FOR_WIN = 5;

    var countQuestionsSuccess = 0;

    this.startGame = function () {
        managerDom.start();

        var question = managerQuiz.getCurrentQuestion();
        managerDom.renderQuestion(question);
    };

    this.updateAnswer = function (answer) {
        var isCorrect = managerQuiz.isCorrectQuestion(answer);
        if (isCorrect) {
            countQuestionsSuccess = countQuestionsSuccess + 1;
            managerQuiz.updateQuestions();
        }

        managerDom.renderQuestionAnswered(answer, isCorrect);
        managerDom.toggleButtonNext();
    };

    this.nextQuestion = function () {
        if (isPlayerWin()) {
            managerDom.printVictory();
        } else {
            var question = managerQuiz.getCurrentQuestion();
            managerDom.renderQuestion(question);
            managerDom.toggleButtonNext();
        }
    };

    function isPlayerWin() {
        return countQuestionsSuccess === NUMBER_FOR_WIN;
    };
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function ManagerDom() {
    var _this = this;

    var idLoad = "amidi";
    var idApp = "app";

    var idQuestion = "preguntas";
    var idNext = "siguiente";

    var idWin = "ganador";

    this.start = function () {
        var divLoad = document.getElementById(idLoad);
        var divApp = document.getElementById(idApp);

        divLoad.classList.add('hidden');
        divApp.classList.remove('hidden');

        document.body.style.backgroundColor = '#57CCD8';
    };

    this.renderQuestion = function (question) {
        var divQuestion = document.getElementById(idQuestion);

        var answerHtml = "<h1 class='center'>" + question.pregunta + "</h1>";
        for (var nAnswer in question.respuestas) {
            answerHtml = answerHtml + " <div class=\"pregunta\"" + " id=\"" + question.respuestas[nAnswer] + "\"" + " onclick=\"window.updateAnswer('" + question.respuestas[nAnswer] + "')\">" + question.respuestas[nAnswer] + "</div>";
        }
        divQuestion.innerHTML = answerHtml;
    };

    this.renderQuestionAnswered = function (answer, isCorrect) {
        var divAnswer = document.getElementById(answer);
        removeAnswerOnClick();

        isCorrect ? divAnswer.style.color = 'yellowgreen' : divAnswer.style.color = 'red';
    };

    this.toggleButtonNext = function () {
        var classList = document.getElementById(idNext).classList;
        var isHidden = classList.contains('hidden');

        isHidden ? classList.remove('hidden') : classList.add('hidden');
    };

    this.printVictory = function () {
        var divVictory = document.getElementById(idWin);
        var divQuestion = document.getElementById(idQuestion);

        _this.toggleButtonNext();
        divVictory.classList.remove('hidden');

        divQuestion.classList.add('hidden');
    };

    function removeAnswerOnClick() {
        var divQuestion = document.getElementById(idQuestion);

        var childNodes = divQuestion.childNodes;
        for (var i = 0; i < childNodes.length; i++) {
            childNodes[i].onclick = function () {
                return false;
            };
        }
    }
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function ManagerFile() {
    this.loadJson = function () {
        return new Promise(function (resolve, reject) {
            var data = "";
            var httpRequest = new XMLHttpRequest();
            httpRequest.onreadystatechange = function () {
                if (httpRequest.readyState === 4) {
                    if (httpRequest.status === 200) {
                        data = httpRequest.responseText;
                        resolve(JSON.parse(data));
                    }
                }
            };
            httpRequest.open('get', '../public/preguntas.json');
            httpRequest.send();
        });
    };
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function ManagerQuiz(ListQuestion) {

    var listQuestion = ListQuestion;
    var currentQuestion = randomQuestion();

    this.getCurrentQuestion = function () {
        return currentQuestion;
    };

    this.getListQuestion = function () {
        return listQuestion;
    };

    this.isCorrectQuestion = function (answer) {
        var result = currentQuestion.respuesta === answer;
        return result;
    };

    this.updateQuestions = function () {
        deleteCurrentQuestionToList();
        currentQuestion = randomQuestion();
    };

    function randomQuestion() {
        var index = Math.floor(Math.random() * (listQuestion.length - 0) + 0);
        return listQuestion[index];
    }

    function deleteCurrentQuestionToList() {
        var position = listQuestion.indexOf(currentQuestion);
        listQuestion.splice(position, 1);
    }
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(0);


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,